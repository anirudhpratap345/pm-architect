generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  notifications Notification[]
  decisions     Decision[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Decision {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("open") // open, in_progress, resolved
  priority    String   @default("medium") // low, medium, high
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deadline    DateTime?
  context     String?
  options     String[] // Array of options being compared
  constraints String[] // Array of constraints
  metrics     String[] // Array of important metrics
  stakeholders String[] // Array of stakeholder emails
  tags        String[] // Array of tags
  user        User     @relation(fields: [createdBy], references: [id])
  comments    Comment[]
  notifications Notification[]
}

model Comment {
  id          String   @id @default(cuid())
  decisionId  String
  userId      String
  content     String
  createdAt   DateTime @default(now())
  parentId    String?  // For threading (null = top-level)
  mentions    String[] // Array of user emails/usernames mentioned
  user        User     @relation(fields: [userId], references: [id])
  decision    Decision @relation(fields: [decisionId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  decisionId String
  type      String   // mention, status_change, comment, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  decision  Decision @relation(fields: [decisionId], references: [id])
}