// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  decisions     Decision[]
  comments      Comment[]
  notifications Notification[]
  teams         TeamMember[]
  ownedTeams    Team[]         @relation("TeamOwner")
  templates     DecisionTemplate[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Decision {
  id            String         @id @default(cuid())
  title         String
  description   String
  status        String         @default("open")
  priority      String         @default("medium")
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deadline      DateTime?
  context       String?
  options       String[]
  constraints   String[]
  metrics       String[]
  stakeholders  String[]
  tags          String[]
  comments      Comment[]
  user          User           @relation(fields: [createdBy], references: [id])
  notifications Notification[]
  team          Team?          @relation(fields: [teamId], references: [id])
  teamId        String?
  sharedWith    DecisionShare[]
  template      DecisionTemplate? @relation(fields: [templateId], references: [id])
  templateId    String?
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  decisionId String
  userId     String
  parentId   String?
  mentions   String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  decision   Decision @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  decisionId String
  type       String
  title      String
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  decision   Decision @relation(fields: [decisionId], references: [id])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  decisions   Decision[]
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("member") // owner, admin, member
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model DecisionShare {
  id         String   @id @default(cuid())
  decisionId String
  userId     String
  permission String   @default("view") // view, edit, comment
  createdAt  DateTime @default(now())
  decision   Decision @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  
  @@unique([decisionId, userId])
}

model DecisionTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  framework   String   // e.g., "SWOT Analysis", "Decision Matrix", "Cost-Benefit Analysis"
  steps       String[] // Step-by-step process
  questions   String[] // Key questions to consider
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdByUser User   @relation(fields: [createdBy], references: [id])
  decisions   Decision[]
  usages      TemplateUsage[]
}

model TemplateUsage {
  id         String   @id @default(cuid())
  templateId String
  decisionId String
  usedAt     DateTime @default(now())
  template   DecisionTemplate @relation(fields: [templateId], references: [id])
  
  @@unique([templateId, decisionId])
}
